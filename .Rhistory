WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
someFunc <- function(x){
return(x)
}
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE)
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
print(g)
print('The interval 5-min interval with the largest number of steps ends at minute: \n')
print( DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)] )}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
## Let's make sure we *did* fill up the same-sized dataframe
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
someFunc <- function(x){
return(x)
}
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE)
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
print(g)
print('The interval 5-min interval with the largest number of steps ends at minute: \n')
print( DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)] )}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
## Let's make sure we *did* fill up the same-sized dataframe
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE,ref.label =
c('q4','weekendAveraging','weekendFactor','q3','fillNAs',
'checkNA','q2','q1','DNTimeSeries','DNHist','reading'))
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
print(g)
print('The interval 5-min interval with the largest number of steps ends at minute: \n')
print( DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)] )}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
## Let's make sure we *did* fill up the same-sized dataframe
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE,ref.label =
c('q4','weekendAveraging','weekendFactor','q3','fillNAs',
'checkNA','q2','q1','DNTimeSeries','DNHist','reading'))
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
print(g)
print('The interval 5-min interval with the largest number of steps ends at minute: \n')
print( DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)] )}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
## Let's make sure we *did* fill up the same-sized dataframe
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE)
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
print(g)
print('The interval 5-min interval with the largest number of steps ends at minute: \n')
print( DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)] )}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
## Let's make sure we *did* fill up the same-sized dataframe
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE)
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
print(g)
print('The interval 5-min interval with the largest number of steps ends at minute: \n')
print( DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)] )}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
## Let's make sure we *did* fill up the same-sized dataframe
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
knitr::opts_chunk$set(echo=TRUE,results='asis',cache=TRUE)
RawActivity <- read.csv('activity.csv', stringsAsFactors=FALSE)
PlotHistMeanMedian <- function(NumericVector){
hist(NumericVector, breaks=10)
#note that # of breaks was found after some visual checking
abline(v=median(NumericVector, na.rm=TRUE), col='green', lwd=2)
abline(v=mean(NumericVector, na.rm=TRUE), col='blue', lty=2, lwd=2)
legend("topright", col=c('green','blue'), legend=c('Median','Mean'),
lwd=2, lty=c(1,2))
}
PlotTimeSeries <- function(DataFrame, Facet=FALSE){
g <- ggplot(DataFrame, aes(Interval,StepsPerInterval)) + geom_line()
if (Facet==TRUE){
g <- g + facet_grid(Weekend ~ .)}
## Will add a vertical line @x where y(x) is highest
## I.e., add vline @Interval where Steps(Interval) is highest
g <- g + geom_vline( aes(xintercept = as.numeric(DataFrame$Interval[DataFrame$Steps==max(DataFrame$Steps)]),
col = 'red'))
print(g)}
TotalStepsPerDay <- tapply(RawActivity$steps,
as.factor(RawActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(TotalStepsPerDay)
AvgStepsPerInterval <- tapply(RawActivity$steps,
as.factor(RawActivity$interval),
mean, na.rm=TRUE)
PlotTimeSeries( data.frame(
StepsPerInterval = AvgStepsPerInterval,
Interval = sapply(names(AvgStepsPerInterval),as.numeric)),
Facet = FALSE)
colSums(is.na(RawActivity))
FilledActivity <- RawActivity[!is.na(RawActivity$steps), ]
for (Interval in as.numeric(names(AvgStepsPerInterval))){
Condition = is.na(RawActivity$steps) & RawActivity$interval==Interval
temp = RawActivity[Condition, ]
## we've subset temp, now we need to replace the NA vals
temp[is.na(temp)] <- AvgStepsPerInterval[[ as.character(Interval) ]]
FilledActivity <- rbind(FilledActivity, temp)
}
dim(RawActivity)==dim(FilledActivity); sum(is.na(FilledActivity$steps))
NEWTotalStepsPerDay <- tapply(FilledActivity$steps,
as.factor(FilledActivity$date),
sum, na.rm=TRUE)
PlotHistMeanMedian(NEWTotalStepsPerDay)
WeekendNames = c('Saturday', 'Sunday')
FilledActivity$Weekend <- factor(
weekdays(as.Date(FilledActivity$date)) %in% WeekendNames,
levels=c(FALSE, TRUE), labels=c('Weekday', 'Weekend')
)
temp <- subset(FilledActivity, Weekend=='Weekday')
wdAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
temp <- subset(FilledActivity, Weekend=='Weekend')
weAverages <- tapply( temp$steps,
as.factor(temp$interval),
mean, na.rm=TRUE)
remove(temp)
WeekendDF <- data.frame(
StepsPerInterval = c(wdAverages, weAverages),
Interval = c(sapply(names(wdAverages),as.numeric),
sapply(names(weAverages),as.numeric)),
Weekend = c(rep('Weekday',length(wdAverages)), rep('Weekend',length(weAverages))))
PlotTimeSeries( WeekendDF ,
Facet = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
unlink('PA1_template_cache', recursive = TRUE)
